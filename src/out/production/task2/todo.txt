TODO:
- Implement gene
    - Initialize valid gene [[0,0,0,0],
                             [0,0,0,0],
                             [1,1,1,1]
                            ]
        Initialize by the stupid method of: row_segments = len(image) / num_segments. Each segment is row_segments rows.
    - This genes positions corresponds to a pixel in the input image.



- Implement floodfill (used to identify segments)


- Implement NSGA-II Optimization (probably)
    - Non-dominated search
    - Crowding distance
    - Elitism
        - TODO: What is even a population
        -
1. Define Individual
2. Define Population
3. Create non-dominating sorting function
    a. Minimize overall deviance D
    b. Maximize edge value E -> Minimize instead
    c. Define domination:
        this.E = other.E, but this.D < other.D
        -> this is dominated by other
    d. Rank of a node = 1 + (amount of nodes that dominate)
    e. Put nodes into tiers (fronts)
    f. Accept best 2N nodes from top tiers
4. Crowding distance
    a. Reduce children node amount to N
        i. Try to add entire fronts at a time
        ii. When an entire front cannot be added, sort by crowding distance
            - For each objective function:
                1. Sort by all objective functions separately
                2. Assign a large distance to best and worst solution to the objective function
                3. For all other solutions:
                    - Calculate crowding distance by looking at a node's two closest neighbours (in the sorted list)
        iii. Add only the n best solutions resulting from the largest crowding distance
5. Create offspring population of size N from parent population of size 2N
    a. Crowding Tournament Selection Operator
        i. Choose two individuals i and j
        ii. If one rank is better, it wins
        iii. If ranks are equal, choose the one with the larger crowding distance
    b. Crossover (choose our own) gg ez
    c. Mutation (choose our own) gg super ez